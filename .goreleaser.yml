builds:
- env:
  - CGO_ENABLED=0
archives:
- replacements:
    darwin: Darwin
    linux: Linux
    windows: Windows
    386: i386
    amd64: x86_64
checksum:
  name_template: 'checksums.txt'
snapshot:
  name_template: "{{ .Tag }}-next"
changelog:
  sort: asc
  filters:
    exclude:
    - '^docs:'
    - '^test:'

snapcrafts:
  -
    # Replacements for GOOS and GOARCH in the package name.
    # Keys should be valid GOOSs or GOARCHs.
    # Values are the respective replacements.
    # Default is empty.
    replacements:
      amd64: 64-bit
      386: 32-bit
      darwin: macOS
      linux: Tux

    # The name of the snap. This is optional.
    # Default is project name.
    name: gogocat

    # Whether to publish the snap to the snapcraft store.
    # Remember you need to `snapcraft login` first.
    # Defaults to false.
    publish: true

    # Single-line elevator pitch for your amazing snap.
    # 79 char long at most.
    summary: A poor lolcat wannabe made in golang

    # This the description of your snap. You have a paragraph or two to tell the
    # most important story about your snap. Keep it under 100 words though,
    # we live in tweetspace and your description wants to look good in the snap
    # store.
    description: A pipe action tool that outputs colourfully with some highlighting - guaranteed to break the ice at parti

    # A guardrail to prevent you from releasing a snap to all your users before
    # it is ready.
    # `devel` will let you release only to the `edge` and `beta` channels in the
    # store. `stable` will let you release also to the `candidate` and `stable`
    # channels. More info about channels here:
    # https://snapcraft.io/docs/reference/channels
    grade: candidate

    # Snaps can be setup to follow three different confinement policies:
    # `strict`, `devmode` and `classic`. A strict confinement where the snap
    # can only read and write in its own namespace is recommended. Extra
    # permissions for strict snaps can be declared as `plugs` for the app, which
    # are explained later. More info about confinement here:
    # https://snapcraft.io/docs/reference/confinement
    confinement: strict

    # Your app's license, based on SPDX license expressions: https://spdx.org/licenses
    # Default is empty.
    license: MIT

    # A snap of type base to be used as the execution environment for this snap.
    # Valid values are:
    # * bare - Empty base snap;
    # * core - Ubuntu Core 16;
    # * core18 - Ubuntu Core 18.
    # Default is empty.
    # base: core18

    # Each binary built by GoReleaser is an app inside the snap. In this section
    # you can declare extra details for those binaries. It is optional.
    # apps:

      # The name of the app must be the same name as the binary built or the snapcraft name.
      # gogocat:

      #   # If your app requires extra permissions to work outside of its default
      #   # confined space, declare them here.
      #   # You can read the documentation about the available plugs and the
      #   # things they allow:
      #   # https://snapcraft.io/docs/reference/interfaces.
      #   plugs: []

      #   # If you want your app to be autostarted and to always run in the
      #   # background, you can make it a simple daemon.
      #   daemon: simple

      #   # If you any to pass args to your binary, you can add them with the
      #   # args option.
      #   args: --foo

      #   # Bash completion snippet. More information about completion here:
      #   # https://docs.snapcraft.io/tab-completion-for-snaps.
      #   completer: drumroll-completion.bash

    # Allows plugs to be configured. Plugs like system-files and personal-files
    # require this.
    # Default is empty.
    # plugs:
    #   personal-files:
    #     read:
    #     - $HOME/.foo
    #     write:
    #     - $HOME/.foo
    #     - $HOME/.foobar

